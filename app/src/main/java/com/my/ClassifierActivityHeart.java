package com.my;import android.annotation.SuppressLint;import android.app.Activity;import android.content.ActivityNotFoundException;import android.content.Intent;import android.os.Bundle;import android.os.Handler;import android.os.Looper;import android.os.Message;import android.os.SystemClock;import android.support.v4.app.ActivityCompat;import android.support.v4.internal.view.SupportMenu;import android.support.v4.view.ViewCompat;import android.text.TextUtils;import android.util.Log;import android.view.View;import android.widget.AdapterView;import android.widget.AdapterView.OnItemSelectedListener;import android.widget.ArrayAdapter;import android.widget.Button;import android.widget.CompoundButton;import android.widget.CompoundButton.OnCheckedChangeListener;import android.widget.EditText;import android.widget.LinearLayout;import android.widget.ListView;import android.widget.Spinner;import android.widget.TextView;import android.widget.Toast;import android.widget.ToggleButton;import com.example.android.tflitecamerademo.R;import java.io.IOException;import java.util.ArrayList;import java.util.List;public class ClassifierActivityHeart extends Activity {    private static final int FILE_SELECT_CODE_DATA = 101;    private static final int FILE_SELECT_CODE_MODEL = 100;    private static final int MSG_ADD_DATA = 10;    private static final int MSG_FAIL = 11;    private static final int MSG_FINISH = 13;    private static final int MSG_MODEL_INIT_FAIL = 21;    private static final int MSG_MODEL_INIT_SUCCESS = 20;    private static final int MSG_SUCCESS = 12;    private static final String TAG = "ClassifierActivityHeart";    BpMultipleClassifier bpMultipleClassifier;    BaseClassifier baseClassifier;    Runnable classRun = new Runnable() {        public void run() {            try {                if (ClassifierActivityHeart.this.selectClassResultIndex == 0) {                    runBatchEcg();                } else if (ClassifierActivityHeart.this.selectClassResultIndex == 1) {                    runBp();                } else if (ClassifierActivityHeart.this.selectClassResultIndex == 2) {                    runBpMultiple();                }            } catch (Exception e) {                Log.e("test", e.getMessage(), e);                ClassifierActivityHeart.this.mHandler.sendEmptyMessage(11);            }            ClassifierActivityHeart.this.mHandler.post(new Runnable() {                public void run() {                    ClassifierActivityHeart.this.findViewById(R.id.computeButton).setEnabled(true);                }            });        }        void runBatchEcg() throws Exception {            int batchSize = ClassifierActivityHeart.this.baseClassifier.getBatchSize();            byte[] dataArray = Utils.getFromSd(ClassifierActivityHeart.this, ClassifierActivityHeart.this.baseClassifier.getTestDataPath());            int sampleNum = dataArray.length / 16004;            Message msg;            if (sampleNum < batchSize) {                Log.e("===========", "sampleNum:" + sampleNum + "  < batchSize:" + ClassifierActivityHeart.this.baseClassifier.getBatchSize());                msg = ClassifierActivityHeart.this.mHandler.obtainMessage();                msg.what = 11;                ClassifierActivityHeart.this.mHandler.sendMessage(msg);                return;            }            long lastProcessingTimeMs;            BeanData beanData;            long startTimeTotal = SystemClock.uptimeMillis();            float[] array = new float[(batchSize * 4000)];            for (int k = 0; k < 1; k++) {                for (int i = 0; i < sampleNum / batchSize; i++) {                    int wind = 0;                    for (int j = 0; j < batchSize; j++) {//0-49                        for (int ind = 1; ind < 4001; ind++) {//1-4000                            int index = (((j * 4001) * 4) + (ind * 4)) + ((batchSize * 16004) * i);                            array[wind] = ClassifierActivityHeart.this.byteArray2float(dataArray, index);                            wind++;                        }                    }                    long startTime = SystemClock.uptimeMillis();                    ArrayList<String> resultList = ClassifierActivityHeart.this.baseClassifier.classifyFrame(array);                    lastProcessingTimeMs = SystemClock.uptimeMillis() - startTime;                    if (resultList.size() > 0) {                        for (String item : resultList) {                            beanData = new BeanData();                            beanData.result = item;                            beanData.time = lastProcessingTimeMs;                            ClassifierActivityHeart.this.dataList.add(beanData);                        }                    }                }            }            lastProcessingTimeMs = SystemClock.uptimeMillis() - startTimeTotal;            beanData = new BeanData();            beanData.result = "sum";            beanData.time = lastProcessingTimeMs;            ClassifierActivityHeart.this.dataList.add(beanData);            msg = ClassifierActivityHeart.this.mHandler.obtainMessage();            msg.what = 10;            msg.obj = "sum";            ClassifierActivityHeart.this.mHandler.sendMessage(msg);            ClassifierActivityHeart.this.mHandler.sendEmptyMessage(13);        }        void runBp() throws Exception {            int batchSize = ClassifierActivityHeart.this.baseClassifier.getBatchSize();            byte[] dataArray = Utils.getFromSd(ClassifierActivityHeart.this, ClassifierActivityHeart.this.baseClassifier.getTestDataPath());            int sampleNum = dataArray.length / 8012;//2003            Message msg;            if (sampleNum < batchSize) {                Log.e("===========", "sampleNum:" + sampleNum + "  < batchSize:" + ClassifierActivityHeart.this.baseClassifier.getBatchSize());                msg = ClassifierActivityHeart.this.mHandler.obtainMessage();                msg.what = 11;                ClassifierActivityHeart.this.mHandler.sendMessage(msg);                return;            }            long lastProcessingTimeMs;            BeanData beanData;            long startTimeTotal = SystemClock.uptimeMillis();            long maxTime = 0L;            long minTime = 0L;            float[] array = new float[(batchSize * 2003)];            for (int k = 0; k < 50; k++) {                for (int i = 0; i < sampleNum / batchSize; i++) {                    int wind = 0;                    for (int j = 0; j < batchSize; j++) {//0-49                        for (int ind = 0; ind < 2003; ind++) {//1-4000                            int index = (((j * 2003) * 4) + (ind * 4)) + ((batchSize * 8012) * i);                            array[wind] = ClassifierActivityHeart.this.byteArray2float(dataArray, index);                            wind++;                        }                    }                    long startTime = SystemClock.uptimeMillis();                    ArrayList<String> resultList = ClassifierActivityHeart.this.baseClassifier.classifyFrame(array);                    lastProcessingTimeMs = SystemClock.uptimeMillis() - startTime;                    if (maxTime == 0L) {                        maxTime = lastProcessingTimeMs;                        minTime = lastProcessingTimeMs;                    }                    if (maxTime < lastProcessingTimeMs) {                        maxTime = lastProcessingTimeMs;                    }                    if (minTime > lastProcessingTimeMs) {                        minTime = lastProcessingTimeMs;                    }                    if (resultList.size() > 0) {                        for (String item : resultList) {                            beanData = new BeanData();                            beanData.result = item;                            beanData.time = lastProcessingTimeMs;                            ClassifierActivityHeart.this.dataList.add(beanData);                        }                    }                }            }            lastProcessingTimeMs = SystemClock.uptimeMillis() - startTimeTotal;            long avgTime = lastProcessingTimeMs / dataList.size();            beanData = new BeanData();            beanData.result = "合计：" + lastProcessingTimeMs + "ms\n最大：" + maxTime + "ms\n最小：" + minTime + "ms\n平均：" + avgTime + "ms";            beanData.time = lastProcessingTimeMs;            ClassifierActivityHeart.this.dataList.add(beanData);            msg = ClassifierActivityHeart.this.mHandler.obtainMessage();            msg.what = 10;            msg.obj = "sum";            ClassifierActivityHeart.this.mHandler.sendMessage(msg);            ClassifierActivityHeart.this.mHandler.sendEmptyMessage(13);        }        void runBpMultiple() throws Exception {            long lastProcessingTimeMs;            BeanData beanData;            long startTimeTotal = SystemClock.uptimeMillis();            long maxTime = 0L;            long minTime = 0L;            for (int i = 0; i < 50; i++) {                long startTime = SystemClock.uptimeMillis();                ArrayList<String> resultList = bpMultipleClassifier.classifyFrame();                lastProcessingTimeMs = SystemClock.uptimeMillis() - startTime;                if (maxTime == 0L) {                    maxTime = lastProcessingTimeMs;                    minTime = lastProcessingTimeMs;                }                if (maxTime < lastProcessingTimeMs) {                    maxTime = lastProcessingTimeMs;                }                if (minTime > lastProcessingTimeMs) {                    minTime = lastProcessingTimeMs;                }                if (resultList.size() > 0) {                    for (String item : resultList) {                        beanData = new BeanData();                        beanData.result = item;                        beanData.time = lastProcessingTimeMs;                        ClassifierActivityHeart.this.dataList.add(beanData);                    }                }            }            lastProcessingTimeMs = SystemClock.uptimeMillis() - startTimeTotal;            long avgTime = lastProcessingTimeMs / dataList.size();            beanData = new BeanData();            beanData.result = "合计：" + lastProcessingTimeMs + "ms\n最大：" + maxTime + "ms\n最小：" + minTime + "ms\n平均：" + avgTime + "ms";            beanData.time = lastProcessingTimeMs;            ClassifierActivityHeart.this.dataList.add(beanData);            Message msg;            msg = ClassifierActivityHeart.this.mHandler.obtainMessage();            msg.what = 10;            msg.obj = "sum";            ClassifierActivityHeart.this.mHandler.sendMessage(msg);            ClassifierActivityHeart.this.mHandler.sendEmptyMessage(13);        }    };    EditText contentEditTextBatchSize;    LinearLayout mLayoutModel;    LinearLayout mLayoutData;    DataAdapter dataAdapter;    ArrayList<BeanData> dataList = new ArrayList();    ListView dataListView;    private final Handler mHandler = new Handler(Looper.getMainLooper()) {        public void handleMessage(Message msg) {            Button computeButton = (Button) ClassifierActivityHeart.this.findViewById(R.id.computeButton);            switch (msg.what) {                case 10:                    ClassifierActivityHeart.this.dataListView.setTranscriptMode(2);                    ClassifierActivityHeart.this.dataAdapter.notifyDataSetChanged();                    return;                case 11:                    computeButton.setEnabled(true);                    Toast.makeText(ClassifierActivityHeart.this, "异常", Toast.LENGTH_LONG).show();                    return;                case 12:                    Toast.makeText(ClassifierActivityHeart.this, "成功,正在计算,请稍等", Toast.LENGTH_LONG).show();                    return;                case 13:                    computeButton.setEnabled(true);                    Toast.makeText(ClassifierActivityHeart.this, "数据处理完", Toast.LENGTH_LONG).show();                    ClassifierActivityHeart.this.dataListView.setSelection(ClassifierActivityHeart.this.dataAdapter.getCount() - 1);                    return;                case 20:                    ClassifierActivityHeart.this.showMessage("模型初始化成功");                    return;                case 21:                    ClassifierActivityHeart.this.showMessage("模型初始化失败");                    return;                default:                    return;            }        }    };    int selectBatchSize = 0;    String selectClassResult;    int selectClassResultIndex = 0;    String selectDataResult;    String selectModelResult;    ToggleButton tbNNApi;    ToggleButton tbGPU;    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_heart);        init();    }    protected void onDestroy() {        if (this.baseClassifier != null) {            this.baseClassifier.close();        }        super.onDestroy();    }    private void init() {        ActivityCompat.requestPermissions(this, new String[]{"android.permission.READ_EXTERNAL_STORAGE", "android.permission.WRITE_EXTERNAL_STORAGE"}, 1);        this.contentEditTextBatchSize = (EditText) findViewById(R.id.contentEditTextBatchSize);        this.mLayoutModel = (LinearLayout) findViewById(R.id.layout_model);        this.mLayoutData = (LinearLayout) findViewById(R.id.layout_data);        final List<String> dataClassList = new ArrayList();        dataClassList.add("4导联12分类 batch_yes");        dataClassList.add("血压");        dataClassList.add("血压多输入");        Spinner selectClassSpinner = (Spinner) findViewById(R.id.selectClassSpinner);        selectClassSpinner.setAdapter(new ArrayAdapter(this, android.R.layout.simple_list_item_1, dataClassList));        selectClassSpinner.setOnItemSelectedListener(new OnItemSelectedListener() {            @SuppressLint("SetTextI18n")            public void onItemSelected(AdapterView<?> adapterView, View view, int position, long id) {                ClassifierActivityHeart.this.selectClassResult = (String) dataClassList.get(position);                ClassifierActivityHeart.this.selectClassResultIndex = position;                mLayoutModel.setVisibility(View.VISIBLE);                mLayoutData.setVisibility(View.VISIBLE);                contentEditTextBatchSize.setVisibility(View.VISIBLE);                if (position == 0) {                    contentEditTextBatchSize.setText("50");                } else if (position == 1) {                    contentEditTextBatchSize.setText("1");                } else if (position == 2) {                    mLayoutModel.setVisibility(View.GONE);                    mLayoutData.setVisibility(View.GONE);                    contentEditTextBatchSize.setVisibility(View.GONE);                }            }            public void onNothingSelected(AdapterView<?> adapterView) {            }        });        this.dataListView = (ListView) findViewById(R.id.dataListView);        this.dataAdapter = new DataAdapter(this, this.dataList);        this.dataListView.setAdapter(this.dataAdapter);        this.tbNNApi = (ToggleButton) findViewById(R.id.btn_nnapi);        this.tbGPU = (ToggleButton) findViewById(R.id.btn_gpu);        //二者不能同时使用        this.tbNNApi.setOnCheckedChangeListener(new OnCheckedChangeListener() {            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {                if (isChecked) {                    tbGPU.setChecked(false);                }                Toast.makeText(ClassifierActivityHeart.this, "模式修改，需要重新初始化", Toast.LENGTH_LONG).show();            }        });        this.tbGPU.setOnCheckedChangeListener(new OnCheckedChangeListener() {            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {                if (isChecked) {                    tbNNApi.setChecked(false);                }                Toast.makeText(ClassifierActivityHeart.this, "模式修改，需要重新初始化", Toast.LENGTH_LONG).show();            }        });        selectModelResult = "/storage/emulated/0/LepuData/assets/ecg_zx_0820.tflite";        selectDataResult = "/storage/emulated/0/LepuData/assets/fourleader_50_testdata.dat";        ((TextView) findViewById(R.id.selectModelTextView)).setText(this.selectModelResult);        ((TextView) findViewById(R.id.selectDataTextView)).setText(this.selectDataResult);    }    public void onActivityResult(int requestCode, int resultCode, Intent data) {        if (resultCode != -1) {            Log.d(TAG, "onActivityResult() error, resultCode: " + resultCode);            super.onActivityResult(requestCode, resultCode, data);            return;        }        if (requestCode == 100) {            this.selectModelResult = Utils.getFilePathByUri(this, data.getData());            Log.d(TAG, String.format("选择的模型路径：%s", new Object[]{this.selectModelResult}));            ((TextView) findViewById(R.id.selectModelTextView)).setText(this.selectModelResult);        } else if (requestCode == 101) {            this.selectDataResult = Utils.getFilePathByUri(this, data.getData());            Log.d(TAG, String.format("选择的数据路径：%s", new Object[]{this.selectDataResult}));            ((TextView) findViewById(R.id.selectDataTextView)).setText(this.selectDataResult);        }        super.onActivityResult(requestCode, resultCode, data);    }    public void viewClick(View view) {        switch (view.getId()) {            case R.id.ic_back /*2131493013*/:                finish();                break;            case R.id.selectModelButton /*2131493013*/:                selectFile(100);                break;            case R.id.selectDataButton /*2131493015*/:                selectFile(101);                break;            case R.id.loadInitButton /*2131493019*/:                computeInit();                break;            case R.id.computeButton /*2131493020*/:                compute(view);                break;            default:                break;        }    }    private void selectFile(int type) {        Intent intent = new Intent("android.intent.action.GET_CONTENT");        intent.setType("*/*");        intent.addCategory("android.intent.category.OPENABLE");        try {            startActivityForResult(Intent.createChooser(intent, "选择文件"), type);        } catch (ActivityNotFoundException e) {            showMessage("没有文件管理器");        }    }    private void showMessage(String message) {        Toast.makeText(this, message, Toast.LENGTH_SHORT).show();    }    private void computeInit() {        boolean nnApi = ClassifierActivityHeart.this.tbNNApi.isChecked();        boolean gpu = ClassifierActivityHeart.this.tbGPU.isChecked();        if (selectClassResultIndex == 2) {            try {                ClassifierActivityHeart.this.bpMultipleClassifier = new BpMultipleClassifier(ClassifierActivityHeart.this, gpu);                ClassifierActivityHeart.this.mHandler.sendEmptyMessageDelayed(20, 1000);            } catch (IOException e) {                ClassifierActivityHeart.this.mHandler.sendEmptyMessage(21);                e.printStackTrace();            }            return;        }        if (TextUtils.isEmpty(this.selectClassResult)) {            showMessage("请先选择分类");        } else if (TextUtils.isEmpty(this.selectModelResult)) {            showMessage("请先选择模型");        } else if (TextUtils.isEmpty(this.selectDataResult)) {            showMessage("请先选择数据");        } else {            this.selectBatchSize = 1;            try {                this.selectBatchSize = Integer.parseInt(this.contentEditTextBatchSize.getText().toString().trim());            } catch (Exception e) {                e.printStackTrace();                this.selectBatchSize = 0;            }            if (this.selectBatchSize <= 0) {                showMessage("请输入正确的batchSize，仅为数字");                return;            }            new Thread(new Runnable() {                public void run() {                    try {                        if (ClassifierActivityHeart.this.selectClassResultIndex == 0) {                            ClassifierActivityHeart.this.baseClassifier =                                    new HeartBeat4lead12classClassifier(                                            ClassifierActivityHeart.this,                                            ClassifierActivityHeart.this.selectModelResult,                                            ClassifierActivityHeart.this.selectDataResult,                                            ClassifierActivityHeart.this.selectBatchSize,                                            nnApi,                                            gpu);                        } else if (ClassifierActivityHeart.this.selectClassResultIndex == 1) {                            ClassifierActivityHeart.this.baseClassifier =                                    new BpClassifier(                                            ClassifierActivityHeart.this,                                            ClassifierActivityHeart.this.selectModelResult,                                            ClassifierActivityHeart.this.selectDataResult,                                            ClassifierActivityHeart.this.selectBatchSize,                                            nnApi,                                            gpu);                        }                        ClassifierActivityHeart.this.mHandler.sendEmptyMessageDelayed(20, 1000);                    } catch (IOException e) {                        e.printStackTrace();                        ClassifierActivityHeart.this.mHandler.sendEmptyMessage(21);                    }                }            }).start();        }    }    private void compute(View view) {        switch (this.selectClassResultIndex) {            case 0:                if (this.baseClassifier == null) {                    showMessage("心电分类实例异常，请重试或联系支持");                    return;                }                break;            case 1:                if (this.baseClassifier == null) {                    showMessage("血压分析实例异常，请重试或联系支持");                    return;                }                break;            case 2:                if (this.bpMultipleClassifier == null) {                    showMessage("血压分析实例异常，请重试或联系支持");                    return;                }                break;        }        if (this.dataList.size() > 0) {            this.dataList.clear();            this.dataAdapter.notifyDataSetChanged();        }        new Thread(this.classRun).start();        view.setEnabled(false);    }    public float byteArray2float(byte[] b, int index) {        return Float.intBitsToFloat((int) (((long) (((int) (((long) (((int) (((long) (b[index + 0] & 255)) | (((long) b[index + 1]) << 8))) & SupportMenu.USER_MASK)) | (((long) b[index + 2]) << 16))) & ViewCompat.MEASURED_SIZE_MASK)) | (((long) b[index + 3]) << 24)));    }}