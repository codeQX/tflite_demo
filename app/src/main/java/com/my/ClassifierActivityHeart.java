package com.my;import android.app.Activity;import android.content.ActivityNotFoundException;import android.content.Intent;import android.graphics.Bitmap;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.os.SystemClock;import android.support.annotation.NonNull;import android.support.v4.app.ActivityCompat;import android.support.v4.content.ContextCompat;import android.support.v4.internal.view.SupportMenu;import android.support.v4.view.ViewCompat;import android.text.TextUtils;import android.util.Log;import android.view.View;import android.widget.AdapterView;import android.widget.AdapterView.OnItemSelectedListener;import android.widget.ArrayAdapter;import android.widget.Button;import android.widget.CompoundButton;import android.widget.CompoundButton.OnCheckedChangeListener;import android.widget.EditText;import android.widget.ListView;import android.widget.Spinner;import android.widget.TextView;import android.widget.Toast;import android.widget.ToggleButton;import com.example.android.tflitecamerademo.CameraActivity;import com.example.android.tflitecamerademo.ImageClassifier;import com.example.android.tflitecamerademo.ImageClassifierFloatInception;import com.example.android.tflitecamerademo.ImageClassifierQuantizedMobileNet;import com.example.android.tflitecamerademo.R;import java.io.IOException;import java.util.ArrayList;import java.util.List;public class ClassifierActivityHeart extends Activity {    private static final int FILE_SELECT_CODE_DATA = 101;    private static final int FILE_SELECT_CODE_MODEL = 100;    private static final int MSG_ADD_DATA = 10;    private static final int MSG_FAIL = 11;    private static final int MSG_FINISH = 13;    private static final int MSG_MODEL_INIT_FAIL = 21;    private static final int MSG_MODEL_INIT_SUCCESS = 20;    private static final int MSG_SUCCESS = 12;    private static final String TAG = "ClassifierActivityHeart";    BaseClassifier baseClassifier;    ImageClassifier baseImageClassifier;    int batchDataNum;    boolean checkedPermissions;    Runnable classRun = new Runnable() {        public void run() {            try {                if (ClassifierActivityHeart.this.selectClassResultIndex == 0) {                    runBatchMnist();                } else if (ClassifierActivityHeart.this.selectClassResultIndex == 1) {                    runMnist();                } else if (ClassifierActivityHeart.this.selectClassResultIndex == 2) {                    runBatchEcg();                } else if (ClassifierActivityHeart.this.selectClassResultIndex == 3 || ClassifierActivityHeart.this.selectClassResultIndex == 4) {                    runImage();                }else if (ClassifierActivityHeart.this.selectClassResultIndex == 5) {                    runBp();                }            } catch (Exception e) {                Log.e("test", e.getMessage(), e);                ClassifierActivityHeart.this.mHandler.sendEmptyMessage(11);            }            ClassifierActivityHeart.this.mHandler.post(new Runnable() {                public void run() {                    ClassifierActivityHeart.this.findViewById(R.id.computeButton).setEnabled(true);                }            });        }        void runImage() throws Exception {            Bitmap bitmap = Utils.getBitmap(ClassifierActivityHeart.this.baseImageClassifier.getTestDataPath());            if (bitmap == null) {                ClassifierActivityHeart.this.showMessage("图片加载错误");                return;            }            for (int j = 0; j < ClassifierActivityHeart.this.batchDataNum; j++) {                ArrayList<String> resultList = ClassifierActivityHeart.this.baseImageClassifier.classifyFrame(bitmap, null);                if (resultList.size() > 0) {                    for (String item : resultList) {                        BeanData beanData = new BeanData();                        beanData.result = item;                        beanData.time = 0;                        ClassifierActivityHeart.this.dataList.add(beanData);                    }                }            }            ClassifierActivityHeart.this.mHandler.sendEmptyMessage(13);        }        void runOneEcg() throws Exception {            byte[] dataArray = Utils.getFromSd(ClassifierActivityHeart.this, ClassifierActivityHeart.this.baseClassifier.getTestDataPath());            for (int i = 0; i < 50; i++) {                float[] array = new float[4000];                int wind = 0;                for (int ind = 1; ind < 4001; ind++) {                    array[wind] = ClassifierActivityHeart.this.byteArray2float(dataArray, ((i * 4001) * 4) + (ind * 4));                    wind++;                }                long startTime = SystemClock.uptimeMillis();                ArrayList<String> resultList = ClassifierActivityHeart.this.baseClassifier.classifyFrame(array);                long lastProcessingTimeMs = SystemClock.uptimeMillis() - startTime;                if (resultList.size() > 0) {                    for (String item : resultList) {                        final BeanData beanData = new BeanData();                        beanData.result = item;                        beanData.time = lastProcessingTimeMs;                        ClassifierActivityHeart.this.mHandler.post(new Runnable() {                            public void run() {                                ClassifierActivityHeart.this.dataList.add(beanData);                            }                        });                        Message msg = ClassifierActivityHeart.this.mHandler.obtainMessage();                        msg.what = 10;                        msg.obj = item;                        ClassifierActivityHeart.this.mHandler.sendMessage(msg);                    }                }            }        }        void runGroupBatchEcg() throws Exception {            byte[] dataArray = Utils.getFromSd(ClassifierActivityHeart.this, ClassifierActivityHeart.this.baseClassifier.getTestDataPath());            int sampleNum = dataArray.length / 16004;            int ind = 0;            while (ind < sampleNum) {                GroupEcg(dataArray, ind, ClassifierActivityHeart.this.baseClassifier.getBatchSize());                ind += ClassifierActivityHeart.this.baseClassifier.getBatchSize();                Thread.sleep(10);            }            ClassifierActivityHeart.this.mHandler.sendEmptyMessage(13);        }        void GroupEcg(byte[] dataArray, int startInd, int len) throws Exception {            float[] array = new float[(len * 4000)];            int wind = 0;            for (int j = startInd; j < startInd + len; j++) {                for (int ind = 1; ind < 4001; ind++) {                    array[wind] = ClassifierActivityHeart.this.byteArray2float(dataArray, ((j * 4001) * 4) + (ind * 4));                    wind++;                }            }            long startTime = SystemClock.uptimeMillis();            ArrayList<String> resultList = ClassifierActivityHeart.this.baseClassifier.classifyFrame(array);            long lastProcessingTimeMs = SystemClock.uptimeMillis() - startTime;            if (resultList.size() > 0) {                for (String item : resultList) {                    BeanData beanData = new BeanData();                    beanData.result = item;                    beanData.time = lastProcessingTimeMs;                    ClassifierActivityHeart.this.dataList.add(beanData);                    Message msg = ClassifierActivityHeart.this.mHandler.obtainMessage();                    msg.what = 10;                    msg.obj = item;                    ClassifierActivityHeart.this.mHandler.sendMessage(msg);                }            }        }        void runMnist() throws IOException {            long lastProcessingTimeMs;            BeanData beanData;            long startTimeAll = SystemClock.uptimeMillis();            for (int j = 0; j < ClassifierActivityHeart.this.batchDataNum * 5; j++) {                int i = j % ClassifierActivityHeart.this.batchDataNum;                float[] data = new ReaderImg().readImg(ClassifierActivityHeart.this, ClassifierActivityHeart.this.baseClassifier.getTestDataPath(), i);                long startTime = SystemClock.uptimeMillis();                ArrayList<String> resultList = ClassifierActivityHeart.this.baseClassifier.classifyFrame(data);                lastProcessingTimeMs = SystemClock.uptimeMillis() - startTime;                if (resultList.size() > 0) {                    for (String item : resultList) {                        beanData = new BeanData();                        beanData.result = item;                        beanData.time = lastProcessingTimeMs;                        ClassifierActivityHeart.this.dataList.add(beanData);                    }                }            }            lastProcessingTimeMs = SystemClock.uptimeMillis() - startTimeAll;            beanData = new BeanData();            beanData.result = "sum";            beanData.time = lastProcessingTimeMs;            ClassifierActivityHeart.this.dataList.add(beanData);            Message msg = ClassifierActivityHeart.this.mHandler.obtainMessage();            msg.what = 10;            msg.obj = "sum";            ClassifierActivityHeart.this.mHandler.sendMessage(msg);            ClassifierActivityHeart.this.mHandler.sendEmptyMessage(13);        }        void runBatchMnist() throws Exception {            int batchSize = ClassifierActivityHeart.this.baseClassifier.getBatchSize();            float[] dataArrayAll = new ReaderImg().readAllImg(ClassifierActivityHeart.this, ClassifierActivityHeart.this.baseClassifier.getTestDataPath(), ClassifierActivityHeart.this.batchDataNum);            int sampleNum = dataArrayAll.length / 784;            Message msg;            if (sampleNum < batchSize) {                Log.e("===========", "sampleNum:" + sampleNum + "  < batchSize:" + batchSize);                msg = ClassifierActivityHeart.this.mHandler.obtainMessage();                msg.what = 11;                ClassifierActivityHeart.this.mHandler.sendMessage(msg);                return;            }            long lastProcessingTimeMs;            BeanData beanData;            long startTimeTotal = SystemClock.uptimeMillis();            int perCount = batchSize * 784;            float[] dataArray = new float[perCount];            for (int j = 0; j < sampleNum / batchSize; j++) {                System.arraycopy(dataArrayAll, j * perCount, dataArray, 0, dataArray.length);                long startTime = SystemClock.uptimeMillis();                ArrayList<String> resultList = ClassifierActivityHeart.this.baseClassifier.classifyFrame(dataArray);                lastProcessingTimeMs = SystemClock.uptimeMillis() - startTime;                if (resultList.size() > 0) {                    for (String item : resultList) {                        beanData = new BeanData();                        beanData.result = item;                        beanData.time = lastProcessingTimeMs;                        ClassifierActivityHeart.this.dataList.add(beanData);                    }                }            }            lastProcessingTimeMs = SystemClock.uptimeMillis() - startTimeTotal;            beanData = new BeanData();            beanData.result = "sum";            beanData.time = lastProcessingTimeMs;            ClassifierActivityHeart.this.dataList.add(beanData);            msg = ClassifierActivityHeart.this.mHandler.obtainMessage();            msg.what = 10;            msg.obj = "sum";            ClassifierActivityHeart.this.mHandler.sendMessage(msg);            ClassifierActivityHeart.this.mHandler.sendEmptyMessage(13);        }        void runBatchEcg() throws Exception {            int batchSize = ClassifierActivityHeart.this.baseClassifier.getBatchSize();            byte[] dataArray = Utils.getFromSd(ClassifierActivityHeart.this, ClassifierActivityHeart.this.baseClassifier.getTestDataPath());            int sampleNum = dataArray.length / 16004;            Message msg;            if (sampleNum < batchSize) {                Log.e("===========", "sampleNum:" + sampleNum + "  < batchSize:" + ClassifierActivityHeart.this.baseClassifier.getBatchSize());                msg = ClassifierActivityHeart.this.mHandler.obtainMessage();                msg.what = 11;                ClassifierActivityHeart.this.mHandler.sendMessage(msg);                return;            }            long lastProcessingTimeMs;            BeanData beanData;            long startTimeTotal = SystemClock.uptimeMillis();            float[] array = new float[(batchSize * 4000)];            for (int k = 0; k < 1; k++) {                for (int i = 0; i < sampleNum / batchSize; i++) {                    int wind = 0;                    for (int j = 0; j < batchSize; j++) {//0-49                        for (int ind = 1; ind < 4001; ind++) {//1-4000                            int index = (((j * 4001) * 4) + (ind * 4)) + ((batchSize * 16004) * i);                            array[wind] = ClassifierActivityHeart.this.byteArray2float(dataArray, index);                            wind++;                        }                    }                    long startTime = SystemClock.uptimeMillis();                    ArrayList<String> resultList = ClassifierActivityHeart.this.baseClassifier.classifyFrame(array);                    lastProcessingTimeMs = SystemClock.uptimeMillis() - startTime;                    if (resultList.size() > 0) {                        for (String item : resultList) {                            beanData = new BeanData();                            beanData.result = item;                            beanData.time = lastProcessingTimeMs;                            ClassifierActivityHeart.this.dataList.add(beanData);                        }                    }                }            }            lastProcessingTimeMs = SystemClock.uptimeMillis() - startTimeTotal;            beanData = new BeanData();            beanData.result = "sum";            beanData.time = lastProcessingTimeMs;            ClassifierActivityHeart.this.dataList.add(beanData);            msg = ClassifierActivityHeart.this.mHandler.obtainMessage();            msg.what = 10;            msg.obj = "sum";            ClassifierActivityHeart.this.mHandler.sendMessage(msg);            ClassifierActivityHeart.this.mHandler.sendEmptyMessage(13);        }        void runBp() throws Exception {            int batchSize = ClassifierActivityHeart.this.baseClassifier.getBatchSize();            byte[] dataArray = Utils.getFromSd(ClassifierActivityHeart.this, ClassifierActivityHeart.this.baseClassifier.getTestDataPath());            int sampleNum = dataArray.length / 8012;//2003            Message msg;            if (sampleNum < batchSize) {                Log.e("===========", "sampleNum:" + sampleNum + "  < batchSize:" + ClassifierActivityHeart.this.baseClassifier.getBatchSize());                msg = ClassifierActivityHeart.this.mHandler.obtainMessage();                msg.what = 11;                ClassifierActivityHeart.this.mHandler.sendMessage(msg);                return;            }            long lastProcessingTimeMs;            BeanData beanData;            long startTimeTotal = SystemClock.uptimeMillis();            float[] array = new float[(batchSize * 2003)];            for (int k = 0; k < 1; k++) {                for (int i = 0; i < sampleNum / batchSize; i++) {                    int wind = 0;                    for (int j = 0; j < batchSize; j++) {//0-49                        for (int ind = 0; ind < 2003; ind++) {//1-4000                            int index = (((j * 2003) * 4) + (ind * 4)) + ((batchSize * 8012) * i);                            array[wind] = ClassifierActivityHeart.this.byteArray2float(dataArray, index);                            wind++;                        }                    }                    long startTime = SystemClock.uptimeMillis();                    ArrayList<String> resultList = ClassifierActivityHeart.this.baseClassifier.classifyFrame(array);                    lastProcessingTimeMs = SystemClock.uptimeMillis() - startTime;                    if (resultList.size() > 0) {                        for (String item : resultList) {                            beanData = new BeanData();                            beanData.result = item;                            beanData.time = lastProcessingTimeMs;                            ClassifierActivityHeart.this.dataList.add(beanData);                        }                    }                }            }            lastProcessingTimeMs = SystemClock.uptimeMillis() - startTimeTotal;            beanData = new BeanData();            beanData.result = "sum";            beanData.time = lastProcessingTimeMs;            ClassifierActivityHeart.this.dataList.add(beanData);            msg = ClassifierActivityHeart.this.mHandler.obtainMessage();            msg.what = 10;            msg.obj = "sum";            ClassifierActivityHeart.this.mHandler.sendMessage(msg);            ClassifierActivityHeart.this.mHandler.sendEmptyMessage(13);        }    };    EditText contentEditTextBatchDataNumber;    EditText contentEditTextBatchSize;    DataAdapter dataAdapter;    ArrayList<BeanData> dataList = new ArrayList();    ListView dataListView;    Handler mHandler = new Handler() {        public void handleMessage(Message msg) {            Button computeButton = (Button) ClassifierActivityHeart.this.findViewById(R.id.computeButton);            switch (msg.what) {                case 10:                    ClassifierActivityHeart.this.dataListView.setTranscriptMode(2);                    ClassifierActivityHeart.this.dataAdapter.notifyDataSetChanged();                    return;                case 11:                    computeButton.setEnabled(true);                    Toast.makeText(ClassifierActivityHeart.this, "异常", Toast.LENGTH_LONG).show();                    return;                case 12:                    Toast.makeText(ClassifierActivityHeart.this, "成功,正在计算,请稍等", Toast.LENGTH_LONG).show();                    return;                case 13:                    computeButton.setEnabled(true);                    Toast.makeText(ClassifierActivityHeart.this, "数据处理完", Toast.LENGTH_LONG).show();                    ClassifierActivityHeart.this.dataListView.setSelection(ClassifierActivityHeart.this.dataAdapter.getCount() - 1);                    return;                case 20:                    ClassifierActivityHeart.this.showMessage("模型初始化成功");                    return;                case 21:                    ClassifierActivityHeart.this.showMessage("模型初始化失败");                    return;                default:                    return;            }        }    };    int selectBatchSize = 0;    String selectClassResult;    int selectClassResultIndex = 0;    String selectDataResult;    String selectModelResult;    ToggleButton toggleButton;    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_heart);        init();    }    protected void onDestroy() {        if (this.baseClassifier != null) {            this.baseClassifier.close();        }        super.onDestroy();    }    private void init() {        ActivityCompat.requestPermissions(this, new String[]{"android.permission.READ_EXTERNAL_STORAGE", "android.permission.WRITE_EXTERNAL_STORAGE"}, 1);        this.contentEditTextBatchSize = (EditText) findViewById(R.id.contentEditTextBatchSize);        this.contentEditTextBatchDataNumber = (EditText) findViewById(R.id.contentEditTextBatchDataNumber);        final List<String> dataClassList = new ArrayList();        dataClassList.add("4导联10分类 batch_yes");        dataClassList.add("4导联10分类 batch_no");        dataClassList.add("4导联12分类 batch_yes");        dataClassList.add("图片299");        dataClassList.add("图片224");        dataClassList.add("血压");        Spinner selectClassSpinner = (Spinner) findViewById(R.id.selectClassSpinner);        selectClassSpinner.setAdapter(new ArrayAdapter(this, android.R.layout.simple_list_item_1, dataClassList));        selectClassSpinner.setOnItemSelectedListener(new OnItemSelectedListener() {            public void onItemSelected(AdapterView<?> adapterView, View view, int position, long id) {                ClassifierActivityHeart.this.selectClassResult = (String) dataClassList.get(position);                ClassifierActivityHeart.this.selectClassResultIndex = position;            }            public void onNothingSelected(AdapterView<?> adapterView) {            }        });        this.dataListView = (ListView) findViewById(R.id.dataListView);        this.dataAdapter = new DataAdapter(this, this.dataList);        this.dataListView.setAdapter(this.dataAdapter);        this.toggleButton = (ToggleButton) findViewById(R.id.toggleButton);        this.toggleButton.setOnCheckedChangeListener(new OnCheckedChangeListener() {            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {//                if (ClassifierActivityHeart.this.baseClassifier != null) {//                    ClassifierActivityHeart.this.baseClassifier.setUseNNAPI(Boolean.valueOf(isChecked));//                }//                if (ClassifierActivityHeart.this.baseImageClassifier != null) {//                    ClassifierActivityHeart.this.baseImageClassifier.setUseNNAPI(Boolean.valueOf(isChecked));//                }                Toast.makeText(ClassifierActivityHeart.this,"模式修改，需要重新初始化",Toast.LENGTH_LONG).show();            }        });        selectModelResult = "/storage/emulated/0/LepuData/assets/ecg_zx_0820.tflite";        selectDataResult = "/storage/emulated/0/LepuData/assets/fourleader_50_testdata.dat";        ((TextView) findViewById(R.id.selectModelTextView)).setText(this.selectModelResult);        ((TextView) findViewById(R.id.selectDataTextView)).setText(this.selectDataResult);    }    public void onActivityResult(int requestCode, int resultCode, Intent data) {        if (resultCode != -1) {            Log.d(TAG, "onActivityResult() error, resultCode: " + resultCode);            super.onActivityResult(requestCode, resultCode, data);            return;        }        if (requestCode == 100) {            this.selectModelResult = Utils.getFilePathByUri(this, data.getData());            Log.d(TAG, String.format("选择的模型路径：%s", new Object[]{this.selectModelResult}));            ((TextView) findViewById(R.id.selectModelTextView)).setText(this.selectModelResult);        } else if (requestCode == 101) {            this.selectDataResult = Utils.getFilePathByUri(this, data.getData());            Log.d(TAG, String.format("选择的数据路径：%s", new Object[]{this.selectDataResult}));            ((TextView) findViewById(R.id.selectDataTextView)).setText(this.selectDataResult);        }        super.onActivityResult(requestCode, resultCode, data);    }    public void viewClick(View view) {        switch (view.getId()) {            case R.id.selectModelButton /*2131493013*/:                selectFile(100);                break;            case R.id.selectDataButton /*2131493015*/:                selectFile(101);                break;            case R.id.loadInitButton /*2131493019*/:                computeInit();                break;            case R.id.computeButton /*2131493020*/:                compute(view);                break;            case R.id.cameraButton:                Intent intent = new Intent(this, CameraActivity.class);                startActivity(intent);                break;            default:                break;        }    }    private void selectFile(int type) {        Intent intent = new Intent("android.intent.action.GET_CONTENT");        intent.setType("*/*");        intent.addCategory("android.intent.category.OPENABLE");        try {            startActivityForResult(Intent.createChooser(intent, "选择文件"), type);        } catch (ActivityNotFoundException e) {            showMessage("没有文件管理器");        }    }    private void showMessage(String message) {        Toast.makeText(this, message, Toast.LENGTH_SHORT).show();    }    private void computeInit() {        if (TextUtils.isEmpty(this.selectClassResult)) {            showMessage("请先选择分类");        } else if (TextUtils.isEmpty(this.selectModelResult)) {            showMessage("请先选择模型");        } else if (TextUtils.isEmpty(this.selectDataResult)) {            showMessage("请先选择数据");        } else {            this.selectBatchSize = 1;            try {                this.selectBatchSize = Integer.parseInt(this.contentEditTextBatchSize.getText().toString().trim());            } catch (Exception e) {                e.printStackTrace();                this.selectBatchSize = 0;            }            if (this.selectBatchSize <= 0) {                showMessage("请输入正确的batchSize，仅为数字");                return;            }            try {                this.batchDataNum = Integer.parseInt(this.contentEditTextBatchDataNumber.getText().toString().trim());            } catch (Exception e2) {                e2.printStackTrace();                this.batchDataNum = 0;            }            if (this.batchDataNum <= 0) {                showMessage("请输入正确的batchDataNum，仅为数字");            } else {                new Thread(new Runnable() {                    public void run() {                        try {                            boolean nnApi = Boolean.valueOf(ClassifierActivityHeart.this.toggleButton.isChecked());                            if (ClassifierActivityHeart.this.selectClassResultIndex == 0) {                                ClassifierActivityHeart.this.baseClassifier = new MnistBatchClassifier(ClassifierActivityHeart.this, ClassifierActivityHeart.this.selectModelResult, ClassifierActivityHeart.this.selectDataResult, ClassifierActivityHeart.this.selectBatchSize,nnApi);                            } else if (ClassifierActivityHeart.this.selectClassResultIndex == 1) {                                ClassifierActivityHeart.this.baseClassifier = new MnistClassifer(ClassifierActivityHeart.this, ClassifierActivityHeart.this.selectModelResult, ClassifierActivityHeart.this.selectDataResult, ClassifierActivityHeart.this.selectBatchSize,nnApi);                            } else if (ClassifierActivityHeart.this.selectClassResultIndex == 2) {                                ClassifierActivityHeart.this.baseClassifier = new HeartBeat4lead12classClassifier(ClassifierActivityHeart.this, ClassifierActivityHeart.this.selectModelResult, ClassifierActivityHeart.this.selectDataResult, ClassifierActivityHeart.this.selectBatchSize,nnApi);                            } else if (ClassifierActivityHeart.this.selectClassResultIndex == 3) {                                ClassifierActivityHeart.this.baseImageClassifier = new ImageClassifierFloatInception(ClassifierActivityHeart.this, ClassifierActivityHeart.this.selectModelResult, ClassifierActivityHeart.this.selectDataResult, 1);                            } else if (ClassifierActivityHeart.this.selectClassResultIndex == 4) {                                ClassifierActivityHeart.this.baseImageClassifier = new ImageClassifierQuantizedMobileNet(ClassifierActivityHeart.this, ClassifierActivityHeart.this.selectModelResult, ClassifierActivityHeart.this.selectDataResult, 1);                            } else if (ClassifierActivityHeart.this.selectClassResultIndex == 5) {                                ClassifierActivityHeart.this.baseClassifier = new BpClassifier(ClassifierActivityHeart.this, ClassifierActivityHeart.this.selectModelResult, ClassifierActivityHeart.this.selectDataResult, ClassifierActivityHeart.this.selectBatchSize,nnApi);                            }                            ClassifierActivityHeart.this.mHandler.sendEmptyMessageDelayed(20, 1000);                        } catch (IOException e) {                            e.printStackTrace();                            ClassifierActivityHeart.this.mHandler.sendEmptyMessage(21);                        }                    }                }).start();            }        }    }    private void compute(View view) {        switch (this.selectClassResultIndex) {            case 0:            case 1:            case 2:            case 5:                if (this.baseClassifier == null) {                    showMessage("心电分类实例异常，请重试或联系支持");                    return;                }                break;            case 3:            case 4:                if (this.baseImageClassifier == null) {                    showMessage("图片分类实例异常，请重试或联系支持");                    return;                }                break;        }        if (this.dataList.size() > 0) {            this.dataList.clear();            this.dataAdapter.notifyDataSetChanged();        }        new Thread(this.classRun).start();        view.setEnabled(false);    }    public float byteArray2float(byte[] b, int index) {        return Float.intBitsToFloat((int) (((long) (((int) (((long) (((int) (((long) (b[index + 0] & 255)) | (((long) b[index + 1]) << 8))) & SupportMenu.USER_MASK)) | (((long) b[index + 2]) << 16))) & ViewCompat.MEASURED_SIZE_MASK)) | (((long) b[index + 3]) << 24)));    }//    private boolean allPermissionsGranted() {//        for (String permission : getRequiredPermissions()) {//            if (ContextCompat.checkSelfPermission(this, permission) != 0) {//                return false;//            }//        }//        return true;//    }    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {        super.onRequestPermissionsResult(requestCode, permissions, grantResults);    }//    private String[] getRequiredPermissions() {//        try {//            String[] ps = getPackageManager().getPackageInfo(getPackageName(), 4096).requestedPermissions;//            if (ps == null || ps.length <= 0) {//                return new String[0];//            }//            return ps;//        } catch (Exception e) {//            return new String[0];//        }//    }}